# This file contains common pin mappings for RAMPS (v1.3 and later)
# boards. RAMPS boards typically use a firmware compiled for the AVR
# atmega2560 (though the atmega1280 is also possible).

# See docs/Config_Reference.md for a description of parameters.

#ATOM 2.5EX  Dual extruder and laser modules are supported. 

[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

[board_pins arduino-mega]
aliases:
   ar0=PE0, ar1=PE1, ar2=PE4, ar3=PE5, ar4=PG5,
   ar5=PE3, ar6=PH3, ar7=PH4, ar8=PH5, ar9=PH6,
   ar10=PB4, ar11=PB5, ar12=PB6, ar13=PB7, ar14=PJ1,
   ar15=PJ0, ar16=PH1, ar17=PH0, ar18=PD3, ar19=PD2,
   ar20=PD1, ar21=PD0, ar22=PA0, ar23=PA1, ar24=PA2,
   ar25=PA3, ar26=PA4, ar27=PA5, ar28=PA6, ar29=PA7,
   ar30=PC7, ar31=PC6, ar32=PC5, ar33=PC4, ar34=PC3,
   ar35=PC2, ar36=PC1, ar37=PC0, ar38=PD7, ar39=PG2,
   ar40=PG1, ar41=PG0, ar42=PL7, ar43=PL6, ar44=PL5,
   ar45=PL4, ar46=PL3, ar47=PL2, ar48=PL1, ar49=PL0,
   ar50=PB3, ar51=PB2, ar52=PB1, ar53=PB0, ar54=PF0,
   ar55=PF1, ar56=PF2, ar57=PF3, ar58=PF4, ar59=PF5,
   ar60=PF6, ar61=PF7, ar62=PK0, ar63=PK1, ar64=PK2,
   ar65=PK3, ar66=PK4, ar67=PK5, ar68=PK6, ar69=PK7,
   analog0=PF0, analog1=PF1, analog2=PF2, analog3=PF3, analog4=PF4,
   analog5=PF5, analog6=PF6, analog7=PF7, analog8=PK0, analog9=PK1,
   analog10=PK2, analog11=PK3, analog12=PK4, analog13=PK5, analog14=PK6,
   analog15=PK7,
   # Marlin adds these additional aliases
   ml70=PG4, ml71=PG3, ml72=PJ2, ml73=PJ3, ml74=PJ7,
   ml75=PJ4, ml76=PJ5, ml77=PJ6, ml78=PE2, ml79=PE6,
   ml80=PE7, ml81=PD4, ml82=PD5, ml83=PD6, ml84=PH2,
   ml85=PH7


[stepper_a]
step_pin: PF0
dir_pin: !PF1
enable_pin: !PD7
microsteps: 32
rotation_distance: 40
endstop_pin: ^PE4
homing_speed: 60
#angle = 210.060357
#arm_length = 228.920000
#position_endstop = 348.076715


# The next parameter needs to be adjusted for
# your printer. You may want to start with 280
# and meassure the distance from nozzle to bed.
# This value then needs to be added.
#position_endstop: 350
#arm_length: 228.92

[stepper_b]
step_pin: PF6
dir_pin: !PF7
enable_pin: !PF2
microsteps: 32
rotation_distance: 40
endstop_pin: ^PJ0

[stepper_c]
step_pin: PL3
dir_pin: !PL1
enable_pin: !PK0
microsteps: 32
rotation_distance: 40
endstop_pin: ^PD2

[extruder]
step_pin: PA4
dir_pin: PA6
enable_pin: !PA2
microsteps: 32
rotation_distance: 32.64
nozzle_diameter: 0.400
filament_diameter: 1.750

heater_pin: PB4
sensor_type:  ATC Semitec 104GT-2
sensor_pin: PK5
control: pid
pid_Kp: 16.54
pid_Ki: 1.3
pid_Kd: 52.56
min_extrude_temp: 0
min_temp: 0
max_temp: 275

[extruder1]
step_pin: PC1
dir_pin: PC3
enable_pin: !PC7
microsteps: 32
rotation_distance:32.64
nozzle_diameter: 0.400
filament_diameter: 1.750

shared_heater : extruder


[heater_bed]

heater_pin: PH5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PK6
control: pid
pid_kp: 252.76
pid_ki: 45.92
pid_kd: 347.86
min_temp: 0
max_temp: 150

[output_pin TOOL]
pin: PE5       # use your fan's pin number
pwm: True
hardware_pwm: True
cycle_time: 0.001
shutdown_value: 0
maximum_mcu_duration: 5
# Default: 0 (disabled)
# Amount of time in which the host has to acknowledge
# a non-shutdown output value.
# Suggested value is around 5 seconds.
# Use a value that does not burn up your stock.
# Please note that during homing, your tool
# needs to be in default speed.

[gcode_macro M3]
gcode:
    
    SET_PIN PIN=TOOL VALUE=1


[gcode_macro M5]
gcode:
    SET_PIN PIN=TOOL VALUE=0


# Optional: LCD Menu Control

[menu __main __control __toolonoff]
type: input
enable: {'output_pin TOOL' in printer}
name: Fan: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin TOOL'].value}
input_min: 0
input_max: 1
input_step: 1
gcode:
    M3 S{255 if menu.input else 0}

[menu __main __control __toolspeed]
type: input
enable: {'output_pin TOOL' in printer}
name: Tool speed: {'%3d' % (menu.input*100)}%
input: {printer['output_pin TOOL'].value}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M3 S{'%d' % (menu.input*255)}

[fan]
pin: PH6
kick_start_time: 0.200

[heater_fan extruder_cooler_fan]
pin: PL5

# if you want to use your probe for DELTA_CALIBRATE you will need that
[probe]
pin: !PD3
#z_offset: 0
samples: 3

[mcu]
serial: /dev/serial/by-id/usb-FTDI_FT232R_USB_UART_A105TBG7-if00-port0

[printer]
kinematics: delta
max_velocity: 300
max_accel: 3000
max_z_velocity: 300
#delta_radius: 105.339348
#printer_radius: 105
# if you want to DELTA_CALIBRATE you may need that
minimum_z_position: -5

[idle_timeout]
timeout: 360

[delta_calibrate]
radius: 95.6
# If the original probe is used
horizontal_move_z: 35

[bed_mesh]
speed: 60
horizontal_move_z: 20
mesh_radius:75
mesh_origin: 0,0
round_probe_count: 5

# "RepRapDiscount 2004 Smart Controller" type displays
[display]
lcd_type: hd44780
rs_pin: PH1
e_pin: PH0
d4_pin: PA1
d5_pin: PA3
d6_pin: PA5
d7_pin: PA7
encoder_pins: ^PC6, ^PC4
click_pin: ^!PC2
kill_pin: ^!PG0

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[verify_heater extruder]
max_error: 200

check_gain_time:60

[gcode_macro M851]
gcode:
  G28
  probe_calibrate

[gcode_macro G32]
gcode:
  G28
  delta_calibrate
  G1 X0 Y0 z30 F1000
  save_config

[gcode_macro G29]
gcode:
  G28
  bed_mesh_calibrate
  G1 X0 Y0 Z30 F1000
  save_config

########################################
# System Macros
########################################

[gcode_macro m205]
gcode:
  G4
  
[gcode_macro m108]
gcode:
  G4  

[output_pin BEEPER_pin]
pin: PC0
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

[save_variables]
filename:~/variables.cfg
#   Required - provide a filename that would be used to save the
#   variables to disk e.g. ~/variables.cfg

########################################
# Home and Calibrating Macros
########################################

[gcode_macro MacroHome]
gcode:  G28
        M300

[gcode_macro MacroDeltaCalibrate]
gcode:  G28
        M300
        DELTA_CALIBRATE
        M300   
        G28         
        M300   
        SAVE_CONFIG
        M300   
        M18  
        M300
        
[gcode_macro MacroPIDExtruderFanOFF200]
gcode:  G28                
        M300
        G1 X0 Y0 Z2 F 3000      
        M300
        M107
        PID_CALIBRATE HEATER=extruder TARGET=200
        M300     
        G28 
        SAVE_CONFIG        
        M300    
        M18   
        M300               
        
[gcode_macro MacroPIDExtruderFanOFF230]
gcode:  G28                
        M300
        G1 X0 Y0 Z2 F 3000      
        M300     
        M107
        PID_CALIBRATE HEATER=extruder TARGET=230
        M300     
        G28 
        SAVE_CONFIG        
        M300  
        M18     
        M300               
        
        
[gcode_macro MacroPIDExtruderFanON200]
gcode:  G28                
        M300
        G1 X0 Y0 Z2 F 3000      
        M300   
        M106
        PID_CALIBRATE HEATER=extruder TARGET=200
        M300     
        G28 
        SAVE_CONFIG        
        M300    
        M18   
        M300               
        
[gcode_macro MacroPIDExtruderFanON230]
gcode:  G28                
        M300
        G1 X0 Y0 Z2 F 3000      
        M300   
        M106
        PID_CALIBRATE HEATER=extruder TARGET=230
        M300     
        G28 
        SAVE_CONFIG        
        M300  
        M18     
        M300               
                
[gcode_arcs]
resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

[gcode_macro T1]
gcode:
  ACTIVATE_EXTRUDER extruder=extruder1
  SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder1"'

[gcode_macro T0]
gcode:
  ACTIVATE_EXTRUDER extruder=extruder
  SAVE_VARIABLE VARIABLE=currentextruder VALUE='"extruder"'

[gcode_macro START_GCODE]
gcode:
  {% set svv = printer.save_variables.variables %}
  ACTIVATE_EXTRUDER extruder={svv.currentextruder}

